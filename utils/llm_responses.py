import json
from datetime import datetime
from config import CLIENT_AS

date = datetime.now()

# Общая функция обработки сообщений пользователя
async def llm_response(user_text: str) -> str:
    
    instruction = f'''Ты умный ассистент Мэри по помощи в поиске и добавлении информации в векторных базах данных.
    Определи намерение пользователя по его сообщению: хочет ли он добавить информацию в базу знаний, найти в ней информацию, или это нецелевое сообщение.

    ДОБАВЛЕНИЕ ИНФОРМАЦИИ/НАПОМИНАНИЕ (key: 0): Если пользователь хочет добавить информацию в базу знаний или просит поставить напоминание, тебе нужно лишь занести его текст, не меняя его.

    Формат ответа: {{"key": 0, "text": "<исходный текст пользователя>"}}

    ПОИСК ИНФОРМАЦИИ (key: 1): Если пользователь ищет информацию, четко структурируй его вопрос, при необходимости, для лучшего поиска.

    Формат ответа: {{"key": 1, "text": "<уточненный запрос для поиска>"}}

    НЕЦЕЛЕВОЕ/ПУСТОЕ СООБЩЕНИЕ (key: 2): Если сообщение не относится к добавлению или поиску информации, определи его тип и дай соответствующий ответ.

    a) Пустое/Нецелевое общение: Если пользователь задает тебе обычные, пустые, личные вопросы ("Как дела?", "Что делаешь?", "Привет"), или пишет нецензурные сообщения, четко сообщи, что ты не предназначена для такого общения.

    b) Благодарность: Если пользователь выражает благодарность ("Спасибо", "Благодарю", "Отлично сработано"), ответь на это положительно.

    c) Предупреждение о непонимании: Если ты не уверена в намерении пользователя или подозреваешь, что неправильно классифицировала его запрос как нецелевое (случай 3а), вежливо предупреди его, что ты можешь ошибаться, и предложи переформулировать запрос.

    Формат ответа: {{"key": 2, "text": "<твой ответ, соответствующий ситуации>"}}

    Примеры для key: 2:

    Сообщение: "Привет, как жизнь?"

    Ответ: {{"key": 2, "text": "Я не предназначена для пустого общения или личных разговоров. Моя задача — помогать с базой знаний."}}

    Сообщение: "Спасибо большое!"

    Ответ: {{"key": 2, "text": "Рада помочь!"}}

    Сообщение: "Не знаю, что написать, чтобы ты это запомнила" (Принято как пустое общение, но пользователь не уверен)

    Ответ: {{"key": 2, "text": "Я не предназначена для пустого общения. Если ты пытаешься добавить или найти информацию, но я ошиблась, пожалуйста, переформулируй свой запрос."}}
    '''
    
    chat_completion = await CLIENT_AS.chat.completions.create(
        model="openai/gpt-4o-mini",
        messages=[
            {"role": "system", "content": instruction},
            {"role": "user", "content": user_text}
        ]
    )
    try:
        response_dict = json.loads(chat_completion.choices[0].message.content)
        key_value = response_dict.get('key')
        text_value = response_dict.get('text')
    except json.JSONDecodeError as e:
        print(f"Ошибка при парсинге JSON: {e}")
        
    return key_value, text_value

# После отрицательного результата поиска 
async def llm_response_after_kb(user_text: str) -> str:
    
    instruction = f'''Ты умный ассистент Мэри. Максимально точно попробуй ответить на этот вопрос.
    Если ты не уверена, что сможешь правильно ответить, скажи об этом. Будь очень строгой по разговору.
    Если тебе задают вопрос не по делу, то есть какое-либо приветствие или бессмысленные вопросы по отношению
    к тебе, то ответь, что вопрос не по формату разговора.'''

    chat_completion = await CLIENT_AS.chat.completions.create(
        model="openai/gpt-4o-mini",
        messages=[
            {"role": "system", "content": instruction},
            {"role": "user", "content": user_text}
        ]
    )

    return chat_completion.choices[0].message.content
