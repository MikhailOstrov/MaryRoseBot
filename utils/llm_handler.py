from openai import AsyncOpenAI
import os
from dotenv import load_dotenv

load_dotenv() 

# Клиент OpenAI
CLIENT_AS = AsyncOpenAI(
    api_key=os.getenv("PROXY_API"),
    base_url=os.getenv("BASE_OPENAI_URL"),
)

prompt = '''Определи намерение пользователя по сообщению и обработай текст в зависимости от результата.

Возможные варианты намерений:  
- "0" (сохранить знание в базу),  
- "1" (найти знание в базе),  
- "2" (если не относится).  

Правила обработки текста:  
- Если намерение = "0" (сохранить):  
  Преобразуй сообщение в формулировку факта/знания в краткой форме.  
  Пример:  
    Сообщение: "Запомни, через три дня у нас релиз приложений"  
    Ответ: {"key": "0", "text": "Через 3 дня релиз приложений"}  

- Если намерение = "1" (найти):  
  Преобразуй сообщение в чёткий поисковый запрос, как если бы пользователь задал его напрямую базе знаний.  
  Пример:  
    Сообщение: "А что я говорил про отпуск?"  
    Ответ: {"key": "1", "text": "Что я говорил про отпуск"}  

- Если намерение = "2" (не относится):  
  Просто дай ответ на сообщение пользователя в свободной форме.  
  Пример:  
    Сообщение: "Привет, как дела?"  
    Ответ: {"key": "2", "text": "Привет! У меня всё хорошо, спасибо"}  

Финальный ответ всегда возвращай в формате JSON:  
{"key": "0|1|2", "text": "<обработанный текст или ответ>"}
'''

async def get_response(user_text: str):

    chat_completion = await CLIENT_AS.chat.completions.create(
        model="openai/gpt-4o-mini",
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": user_text}
        ]
    )
    return chat_completion.choices[0].message.content