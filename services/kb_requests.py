import httpx
from httpx import HTTPStatusError

from config import logger, INTERNAL_API_KEY, BACKEND_URL

async def telegram_auth(email: str, chat_id: int):

    url = f"{BACKEND_URL}/auth/telegram-auth"
    headers = {"X-Internal-Api-Key": INTERNAL_API_KEY}
    async with httpx.AsyncClient() as client:
        response = await client.post(
            url, headers=headers, json={"email": email, "chat_id": chat_id}, timeout=30.0
        )
        response.raise_for_status()
    logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

async def save_info_in_kb(text: str, chat_id: int):
    url = f"{BACKEND_URL}/knowledge/add-text"
    headers = {"X-Internal-Api-Key": INTERNAL_API_KEY}
    try:
        async with httpx.AsyncClient() as client:
                response = await client.post(
                    url, headers=headers, json={"text": text, "chat_id": chat_id}, timeout=30.0
                )
                response.raise_for_status()
                response_data = response.json()

                added = response_data.get('added_notes', [])
                failed = response_data.get('failed_notes', [])
                cancelled = response_data.get('cancelled_notes', [])
                
                output_messages = []
                
                if added:
                    output_messages.append(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(added)} –∑–∞–º–µ—Ç–æ–∫:")
                    for note in added:
                        title = note.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫')
                        path = note.get('path', '–ù–µ—Ç –ø—É—Ç–∏')
                        output_messages.append(f"{title} (–†–∞–∑–¥–µ–ª: `{path}`)")
                
                if failed:
                    output_messages.append(f"\n–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {len(failed)} –∑–∞–º–µ—Ç–æ–∫:")
                    for note in failed:
                        title = note.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫')
                        error = note.get('error', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞.')
                        output_messages.append(f"{title}**. –û—à–∏–±–∫–∞: {error}")
                        
                if cancelled:
                    output_messages.append(f"\n{len(cancelled)} –∑–∞–º–µ—Ç–æ–∫ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
                    
                if not output_messages:
                    return "–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç—á–µ—Ç. –ù–∏–∫–∞–∫–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã/–∏–∑–º–µ–Ω–µ–Ω—ã."

                return "\n".join(output_messages)
    except httpx.HTTPStatusError as e:
        if e.response.status_code == 403:
            logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ –≤ –ë–ó –¥–ª—è chat_id={chat_id}")
            return "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} - {e.response.text}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ò—Å–ø—Ä–∞–≤–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –∞ –ø–æ–∫–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –≥–¥–µ-–Ω–∏–±—É–¥—å!"
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ò—Å–ø—Ä–∞–≤–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –∞ –ø–æ–∫–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –≥–¥–µ-–Ω–∏–±—É–¥—å!"

async def get_info_from_kb(query: str, chat_id: int):
    url = f"{BACKEND_URL}/knowledge/search"
    headers = {"X-Internal-Api-Key": INTERNAL_API_KEY}
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                url, headers=headers, json={"query": query, "chat_id": chat_id}, timeout=30.0
            )
            response.raise_for_status()
            result = response.json()
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –ë–ó: {result}")

        if not result.get("success") or not result.get("results"):
            return None
        
        results = result["results"]
        
        message_parts = [
            f"üìå  {idx}. {r['title']} \n   {r['content_preview']}\n"
            for idx, r in enumerate(results, start=1)
        ]
        return "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n" + "\n".join(message_parts).strip()

    except Exception as e:
         return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø—Ä–∞–≤–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    
async def check_limit_in_kb(chat_id: int):
    url = f"{BACKEND_URL}/knowledge/check-limit"
    headers = {"X-Internal-Api-Key": INTERNAL_API_KEY}
    try:
        async with httpx.AsyncClient() as client:
                response = await client.post(
                    url, headers=headers, json={"chat_id": chat_id}, timeout=30.0
                )
                response.raise_for_status()
                logger.info(response)
                data = response.json()
                logger.info(f"–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π {data}")
                count = data["count"]
                if count <= 5:
                     return 1, "–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 5 –∑–∞–ø–∏—Å–µ–π. –†–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–ó. –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –ë–ó."
                else:
                     return 0, None
    except httpx.HTTPStatusError as e:
        if e.response.status_code == 403:
            logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ –≤ –ë–ó –¥–ª—è chat_id={chat_id}")
            return 2, "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø–∏—Å–µ–π."
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} - {e.response.text}")
        return 3, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–æ–≤."
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 3, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–æ–≤."