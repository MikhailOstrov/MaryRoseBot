import asyncio
import logging
import os
from dotenv import load_dotenv
import json

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode

from utils.convert_audio import convert_audio_to_wav
from utils.backend_requests import send_audio_to_backend
from kb_requests.handlers import save_info_in_kb, get_info_from_kb, telegram_auth
from utils.llm_handler import get_response
from utils.chat_history import chat_history


logging.basicConfig(level=logging.INFO)
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

dp = Dispatcher()

class AuthStates(StatesGroup):
    waiting_for_email = State()

# /start —Ö–µ–Ω–¥–ª–µ—Ä
@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url="https://maryrose.by/signup"),
                InlineKeyboardButton(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="auth")
            ]
        ]
    )

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MaryRose.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –ù–∞–∂–∞–ª "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
@dp.callback_query(F.data == "auth")
async def auth_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
    await state.set_state(AuthStates.waiting_for_email)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ email
@dp.message(AuthStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    email = message.text.strip()
    chat_id = message.chat.id
    
    await telegram_auth(email, chat_id)

    await message.answer(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–í–∞—à chat_id: `{chat_id}`\nEmail: `{email}`")
    await state.clear()

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(F.text)
async def text_message_handler(message: Message, bot: Bot) -> None:
    chat_id = message.chat.id
    user_text = message.text
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_text}' –æ—Ç {message.from_user.full_name}")

    response = await get_response(user_text, chat_id)

    data = json.loads(response)

    print(data) # –ü–æ–∫–∞ –ø—É—Å—Ç—å –±—É–¥–µ—Ç, —á—Ç–æ–±—ã —Ç–µ—Å—Ç–∏—Ç—å

    key = int(data['key'])
    text_for_response = data['text']

    try:
        if key == 0:

            await save_info_in_kb(text_for_response, chat_id)
            await bot.send_message(chat_id, f"–°–æ—Ö—Ä–∞–Ω–∏–ª —Ç–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–ó")

        elif key == 1:

            info = await get_info_from_kb(text_for_response, chat_id)
            await bot.send_message(chat_id, f"{info}")

        elif key == 2:

            await bot.send_message(chat_id, f"{text_for_response}")

            # –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
            if chat_id not in chat_history:
                chat_history[chat_id] = []

            chat_history[chat_id].append((user_text, text_for_response))

            if len(chat_history[chat_id]) > 15:
                chat_history[chat_id].pop(0)

            logging.info(f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è chat_history –¥–ª—è {chat_id}: {chat_history.get(chat_id, [])}")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –±—ç–∫: {e}")

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∞—É–¥–∏–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(F.voice | F.audio)
async def audio_message_handler(message: Message, bot: Bot) -> None:
    chat_id = message.chat.id
    file_id = message.voice.file_id if message.voice else message.audio.file_id
    
    if not os.path.exists("downloads"):
        os.makedirs("downloads")
    if not os.path.exists("converted"):
        os.makedirs("converted")

    try:

        file_info = await bot.get_file(file_id)
        original_ogg_path = os.path.join("downloads", file_info.file_path.split('/')[-1])
        await bot.download_file(file_info.file_path, destination=original_ogg_path)
        logging.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {original_ogg_path}")

        wav_path = convert_audio_to_wav(original_ogg_path)
        
        try:
            response_audio = await send_audio_to_backend(wav_path, chat_id)
            await bot.send_message(chat_id, f"{response_audio}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –Ω–∞ –±—ç–∫: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")

async def main() -> None:

    bot = Bot(API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":

    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
