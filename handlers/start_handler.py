from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards.inline_keyboard import auth_keyboard
from services import api_service
from keyboards.register_keyboard import get_webapp_keyboard
from utils.session_manager import session_manager

router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
class AuthStates(StatesGroup):
    waiting_for_auth = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è)
    authorized = State()        # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ (–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞)

# /start
@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(AuthStates.waiting_for_auth)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    await message.answer(
        f"""üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.\n–ù–∞–∂–º–∏ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏–º–µ–µ—à—å –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∞–π—Ç–µ.\n–ù–∞–∂–º–∏ –ê–í–¢–û–†–ò–ó–û–í–ê–¢–¨–°–Ø, –µ—Å–ª–∏ —É–∂–µ –∏–º–µ–µ—à—å –∞–∫–∫–∞—É–Ω—Ç:""",
        reply_markup=auth_keyboard
    )

@router.callback_query(F.data == "auth")
async def auth_via_webapp_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", –∏–Ω–∏—Ü–∏–∏—Ä—É—è –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Web App.
    """
    await state.set_state(AuthStates.waiting_for_auth)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    await callback.answer() # –£–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏

    user_id = callback.from_user.id
    message = callback.message

    # 1. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å—Ç–∞—Ç—É—Å
    await bot.edit_message_text(
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞...",
        chat_id=user_id,
        message_id=message.message_id
    )

    # 2. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è ID –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    session_id = session_manager.start_session(
        user_id=user_id,
        message_id=message.message_id
    )

    # 3. –ü–æ–ª—É—á–∞–µ–º URL –æ—Ç –±—ç–∫–µ–Ω–¥–∞
    webapp_url = await api_service.init_telegram_login(user_id, session_id)

    if webapp_url:
        # 4. –°–Ω–æ–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫—É
        await bot.edit_message_text(
            "–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à Telegram, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∏–∂–µ.",
            chat_id=user_id,
            message_id=message.message_id,
            reply_markup=get_webapp_keyboard(webapp_url, text="üîë –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç")
        )
    else:
        # 5. –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        await bot.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
            chat_id=user_id,
            message_id=message.message_id
        )

# –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_auth
@router.message(AuthStates.waiting_for_auth)
async def ignore_handler(message: Message, state: FSMContext):
    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º ‚Äî –±–æ—Ç –º–æ–ª—á–∏—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
    pass