from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram import Router
from aiogram import Bot, F
import os

from states.kb_states import AddKnowledge
from services.kb_requests import save_info_in_kb
from services.back_requests import send_audio_to_backend
from utils.convert_audio import convert_audio_to_wav
from config import logger

router = Router()

# /add
@router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞–Ω–∏–µ")
async def start_add(message: Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:")
    await state.set_state(AddKnowledge.waiting_for_text)

@router.message(AddKnowledge.waiting_for_text, F.text)
async def process_add_text(message: Message, state: FSMContext):
    await save_info_in_kb(message.text, message.chat.id)
    await message.answer("–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")
    await state.clear()

@router.message(AddKnowledge.waiting_for_text, F.voice | F.audio)
async def process_add_audio(message: Message, state: FSMContext, bot: Bot):
    chat_id = message.chat.id
    file_id = message.voice.file_id if message.voice else message.audio.file_id
    
    temp_dir = "temp"
    os.makedirs(temp_dir, exist_ok=True)

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É OGG-—Ñ–∞–π–ª—É.
    temp_ogg_path = os.path.join(temp_dir, f"{file_id}.ogg")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ
        file_info = await bot.get_file(file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        await bot.download_file(file_info.file_path, destination=temp_ogg_path)
        logger.info(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω –≤ {temp_ogg_path}")
        
        wav_path = convert_audio_to_wav(temp_ogg_path)
        logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. WAV-—Ñ–∞–π–ª: {wav_path}")
            
        response_audio = await send_audio_to_backend(wav_path, chat_id)

        await save_info_in_kb(response_audio, chat_id)
        await message.answer("–ê—É–¥–∏–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")

    finally:
        if os.path.exists(temp_ogg_path):
            os.remove(temp_ogg_path)

